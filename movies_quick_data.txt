> HSET movie:1 movie_name "Star Wars: Episode V - The Empire Strikes Back" plot "After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda, while his friends are pursued by Darth Vader and a bounty hunter named Boba Fett all over the galaxy." release_year 1980 category "Action" rating 8.7 votes 1127635 imdb_id tt0080684

> HSET movie:2 movie_name "The Godfather" plot "The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son." release_year 1972 category "Drama" rating 9.2 votes 1563839 imdb_id tt0068646

> HSET movie:3 movie_name "Heat" plot "A group of professional bank robbers start to feel the heat from police when they unknowingly leave a clue at their latest heist." release_year 1995 category "Thriller" rating 8.2 votes 559490 imdb_id tt0113277

> HSET movie:4 movie_name "Star Wars: Episode VI - Return of the Jedi" category "Action" votes 906260 rating 8.3 release_year 1983  plot "The Rebels dispatch to Endor to destroy the second Empire's Death Star." imdb_id "tt0086190" 


// Create index for redis search example with "article" as the index name
FT.CREATE article ON HASH PREFIX 1 article: SCHEMA url TAG SEPARATOR "," title TEXT content WEIGHT 5.0 TEXT created_at NUMERIC SORTABLE

FT.CREATE idex:movie ON HASH PREFIX 1 "movie" SCHEMA movie_name TEXT SORTABLE release_year NUMERIC SORTABLE rating NUMERIC SORTABLE category TAG SORTABLE

// GET ALL DATA
FT.SEARCH article "*"

// Search for articles with the word "redis" in the title
FT.SEARCH article "redis"

//Search for articles with the word "redis" in the title only return two fields are title and content
FT.SEARCH article "redis" RETURN 1 title as title 2 content as content

//Get values performing a query on a particular fields
FT.SEARCH article "@title:redis"
FT.SEARCH idx:movie "@category:{Thriller|Action} @movie_name:-jedi" return 3 movie_name release_year category

//GET VALUES WITH FUZZY SEARCH
FT.SEARCH article "%Gdfather%"

//GET VALUES BASE ON VALUE OF THE FIELD
FT.SEARCH article "@title:{redis|redis*}"

//GET MULTIPLE VALUES FROM A SINGLE FIELD
FT.SEARCH article "@title:{redis|redis*} @content:{redis|redis*}"

//GET MULTIPLE VALUES FROM A MULTIPLE FIELDS
FT.SEARCH article "@title:{redis|redis*} @content:{redis|redis*}" RETURN 2 title content

//GET VALUES BETWEEN A RANGE
FT.SEARCH article "@release_year:[1970 1980]" RETURN 2 title content

//GET VALUES USING "FILTER" PARAMETER
FT.SEARCH article * FILTER release_year 1970 1980 RETURN 2 title content

//GET VALUES WITH EXCLUDE VALUES IN FIELD
FT.SEARCH article "@release_year:[1970 (2000]" RETURN 2 title content

//COUNTING RECORD USING "LIMIT" PARAMETER
FT.SEARCH article * LIMIT 0 0

//GET ALL INDEXED
FT._LIST

//GET INFORMATION OF INDEXED
FT.INFO article

//UPDATE INDEXED
FT.ALTER article SCHEMA ADD author TEXT

//IMPORT DATA FROM REDIS FILE (END WITH .redis)
 redis-cli < data/redis/import_movies.redis

//GET VALUES WITH NUMERIC (WHERE NUM BETWEEN 1995 AND 2000)
FT.SEARCH movie "@release_year: [1995 2000]" return 1 release_year

//GET VALUES WITH NUMERIC (WHERE NUM > 1995)
FT.SEARCH movie "@release_year: [1995 + inf]" return 1 release_year

//GET VALUES WITH NUMERIC (WHERE NUM >= 1995)
FT.SEARCH movie "@release_year: [1995 (inf]" return 1 release_year

//GET VALUES WITH NUMERIC (WHERE NUM < 1995)
FT.SEARCH movie "@release_year: [-inf (1995]" return 1 release_year

//GET VALUES WITH NUMERIC (WHERE NUM <= 1995)
FT.SEARCH movie "@release_year: [-inf 1995]" return 1 release_year

//GET VALUES WITH SORTBY FIELD
FT.SEARCH movie "@category: {Action}" SORTBY  release_year ASC|DSEC return 2 movie_name release_year

//GET VALUES WITH LIMIT : LIMIT (OFFSET) (COUNT) : LIMIT 0 2
FT.SEARCH movie "@category: {Action}" SORTBY  release_year ASC|DSEC LIMIT 0 2 return 2 movie_name release_year

//GET DATA WITH AGGREGATE
FT.AGGREGATE movie "*" GROUPBY 1 @release_year

//GET DATA WITH AGGREGATE and REDUCE
FT.AGGREGATE movie "*" GROUPBY 1 @category reduce count 0 as total_number
FT.AGGREGATE movie "*" GROUPBY 1 @category reduce count 0 as total_movies reduce sum 1  votes as total_votes

//GET DATA WITH REDUCE
FT.AGGREGATE user * apply year(@last_login) as year apply dayofmonth(@last_login) as month  GROUPBY 2 @year @month reduce count 0 as count_of_login

//GET DATA WITH FILTER
ft.aggregate idx:user "@gender:{female}" groupby 1 @country reduce count 0 as count_females filter "@country !='china'" sortby 2 @count_females DESC

// SET VALUE WITH REDIS JSON
JSON.SET FOO . '{"foo": "bar"}'

// GET VALUE WITH REDIS JSON
JSON.GET FOO

//GET TYPE WITH REDIS JSON
JSON.TYPE FOO => object
JSON.TYPE foo .foo => string

//GET STRING LENGTH WITH REDIS JSON
JSON.STRLEN FOO => 3

json.strappend name '" Doe"'

//GET OBJECT LENGTH AND KEYS
JSON.OBJLEN FOO => 1

//GET OBJECT KEYS
json.objkeys foo

// AUTO INCREMENT WITH NUMERIC VALUE\
JSON.NUMINCRBY foo .age 1